class Stack:
	 def __init__(self):
		 self.items = []

	 def isEmpty(self):
		 return self.items == []

	 def push(self, item):
		 self.items.append(item)

	 def pop(self):
		 return self.items.pop()

	 def peek(self):
		 return self.items[len(self.items)-1]

	 def size(self):
		 return len(self.items)

class Node(object):
	"""
	Tree node: left and right child + data which can be any object
	"""
	def __init__(self, data=None):
		"""
		Node Constructor
		@param data node data object
		"""
		self.left = None
		self.right = None
		self.data = data

	#def __repr__(self):
		#return "Node With Data: %d" % self.data

	def setRootVal(self, data):
		self.data = data

	def insertLeft(self, data):
		"""
		Insert new node with data
		@param data node data object to insert
		"""
		if self.left is None:
			self.left = Node(data)
		#else:
		#	self.left.insertLeft(data)

	def insertRight(self, data):
		"""
		Insert new node with data
		@param data node data object to insert
		"""
		if self.right is None:
			self.right = Node(data)
		#else:
		#	self.right.insertRight(data)

	def lookup(self, data, parent=None):
		"""
		Lookup node containing data
		@param data node data object to look up
		@param parent node's parent
		@returns node and node's parent if found or None, None
		"""
		if data < self.data:
			if self.left is None:
				return None, None
			return self.left.lookup(data, self)
		elif data > self.data:
			if self.right is None:
				return None, None
			return self.right.lookup(data, self)
		else:
			return self, parent

	def children_count(self):
		"""
		Returns the number of children for a given node
		@returns number of children: 0, 1, 2
		"""
		count = 0
		if self.left:
			count += 1
		if self.right:
			count += 1
		return count

	def descendant_count(self):
		"""
		Counts all descendant nodes
		"""
		count = 0
		if self.left:
			count += 1 + self.left.descendant_count()
		if self.right:
			count += 1 + self.right.descendant_count()
		return count

	def delete(self, data):
		"""
		Delete node containing data
		@param data node's content to delete
		"""
		node, parent = self.lookup(data)
		if node:
			children_count = node.children_count()
			if children_count == 0:
				# If node has no children then remove it
				if parent.left is node:
					parent.left = None
				else:
					parent.right = None
				del node
			elif children_count == 1:
				if node.left:
					child = node.left
				else:
					child = node.right
				if parent:
					if parent.left is node:
						parent.left = child
					else:
						parent.right = child
				del node
			else:
				parent = node
				successor = node.right
				while successor.left:
					parent = successor
					successor = successor.left
				node.data = successor.data
				if parent.left == successor:
					parent.left = successor.right
				else:
					parent.right = successor.right
	def inorder_print(self):
		if self.left:
			self.left.print_tree()
		print self.data
		if self.right:
			self.right.print_tree()

	def print_each_level(self):
		# Start off with root node
		thislevel = [self]

		# While there is another level
		while thislevel:
			nextlevel = list()
			#Print all the nodes in the current level, and store the next level in a list
			for node in thislevel:
				print node.data
				if node.left: nextlevel.append(node.left)
				if node.right: nextlevel.append(node.right)
			print
			thislevel = nextlevel

	def compare_trees(self, node):
		"""
		Compare 2 trees
		@param node tree's root node to compare to
		@returns True if the tree passed is identical to this tree
		"""
		if node is None:
			return False
		if self.data != node.data:
			return False
		res = True
		if self.left is None:
			if node.left:
				return False
		else:
			res = self.left.compare_trees(node.left)
		if self.right is None:
			if node.right:
				return False
		else:
			res = self.right.compare_trees(node.right)
		return res

	def tree_data(self):
		"""
		Generator to get the tree nodes data
		"""
		# we use a stack to traverse the tree in a non-recursive way
		stack = []
		node = self
		while stack or node: 
			if node:
				stack.append(node)
				node = node.left
			else: # we are returning so we pop the node and we yield it
				node = stack.pop()
				yield node.data
				node = node.right



bTree = Node()
eTree = Node()
operatorStack = Stack()
operandSatck = Stack()
bracketsSatck = Stack()
treeStack = Stack()

x = "( ( 2 + 4 ) / ( 4 + 2 ) )"
lst = x.split()
for i in range(0,len(lst)):
	try:
		lst[i] = float(lst[i])
	except:
		lst[i] = lst[i]

j = 0
bracketsSatck.push('start')
while not bracketsSatck.isEmpty():
	for i in lst:
		if i == '(':
			bracketsSatck.push(i)
		elif type(i) is float:
			operandSatck.push(i)
		elif i in ['+', '-', '*', '/', '%', '^']:
			operatorStack.push(i)
		elif i == ')':
			bracketsSatck.pop()
			if bracketsSatck.size() == 1:
				bracketsSatck.pop()
				break
			else:
				while not operatorStack.isEmpty():
					bTree.setRootVal(operatorStack.pop())
					bTree.insertRight(operandSatck.pop())
					bTree.insertLeft(operandSatck.pop())
					treeStack.push(bTree)
					if not operatorStack.isEmpty():
						eTree.setRootVal(operatorStack.pop())
						eTree.insertRight(treeStack.pop())
						eTree.insertLeft(treeStack.pop())
						treeStack.push(eTree)

eTree.print_each_level()
print treeStack
